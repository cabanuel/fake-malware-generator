// +build ignore

package main

import (
	_ "embed"
	"gopkg.in/yaml.v3"
	"log"
	"strings"
	"encoding/hex"
	"os"
	"fmt"

)

//go:embed configs/mal_lockbit.yml
var yamlMal []byte

type MalwareIocs struct {
	MalPaths []string `yaml:"MalPaths"`
	MalFiles []string `yaml:"MalFiles"` 
	MalStrings []string `yaml:"MalStrings"`
	MalCommands []string `yaml:"MalCommands"`
	MalBytes []string `yaml:"MalBytes"`
}

type Malware struct {
	Malware MalwareIocs `yaml:"Windows"`
}

func main() {
	var malware Malware
	fmt.Println("GENERATINGMALBYTES")
	err := yaml.Unmarshal(yamlMal, &malware)

	if err !=nil {
		log.Fatal(err)
	}

	outfile, err := os.Create("malbins/malbytes.bin")

    if err != nil {
        log.Fatal(err)
    }

    defer outfile.Close()

    var outbytes []byte

	for _, rawstrings := range malware.Malware.MalBytes {
		rawhexes := strings.Split(rawstrings," ")
		for _, rawhex := range rawhexes {
			rawbyte, _ := hex.DecodeString("00")
			if rawhex == "??" {
				rawbyte, _ = hex.DecodeString("42")
			} else {
				rawbyte, _ = hex.DecodeString(rawhex)
			}
			outbytes = append(outbytes, rawbyte...)
		}
	
	_, err := outfile.Write(outbytes)
	
	if err != nil {
        log.Fatal(err)
    }

	}
}